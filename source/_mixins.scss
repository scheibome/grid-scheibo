@use 'sass:map';
@use 'sass:string';

// Start mixins for grid.scheibo
@mixin w-($size, $col-gutter-size) { /* stylelint-disable-line scss/at-mixin-pattern */
  @if $size == 'full' {
    inline-size: #{map.get($col-widths, $size)};
  } @else {
    inline-size:
      calc(
        #{map.get($col-widths, $size)} * 100% - (1 - #{map.get($col-widths, $size)}) * #{$col-gutter-size}
      );
  }
}

@mixin w2-($size) { /* stylelint-disable-line scss/at-mixin-pattern */
  @if $size == 'full' {
    inline-size: #{map.get($col-widths, $size)};
  } @else {
    inline-size: calc(#{map.get($col-widths, $size)} * 100% - (1 - #{map.get($col-widths, $size)}) * 0px);
  }
}

@mixin o-order($col-grid-breaks) {
  @for $i from 1 through 12 {
    &--#{$i} {
      order: $i;
    }
  }

  @each $break, $breakValue in $col-grid-breaks {
    @media only screen and (min-width: $breakValue) {
      @for $i from 1 through 12 {
        &--#{$i} {
          &\@#{$break} {
            order: $i;
          }
        }
      }
    }
  }
}

@mixin grid-scheibo($col-gutter-size, $col-widths, $col-grid-breaks) {
  $this: &;
  $this-short: string.slice(#{$this}, 2);

  display: flex;
  flex-wrap: wrap;

  &--between {
    justify-content: space-between;
  }

  &--justify-center {
    justify-content: center;
  }

  &--row-reverse {
    flex-direction: row-reverse;
  }

  &--center {
    align-items: center;
  }

  &--vertical-align {
    > [class*="#{$this-short}__col"] {
      margin-block-end: $col-gutter-size;
    }
  }

  &--gutter {
    margin-inline-start: -$col-gutter-size;

    > [class*="#{$this-short}__col"] {
      padding-inline-start: $col-gutter-size;
    }
  }

  &__col {
    @each $key, $value in $col-widths {
      &-#{$key} {
        @include w-(#{$key}, $col-gutter-size);

        [class*="#{$this-short}--gutter"] &,
        [class*="#{$this-short}--nogutter"] & {
          @include w2-(#{$key});
        }
      }
    }

    &--flexgrow {
      flex-grow: 1;
    }
  }

  @each $break, $breakValue in $col-grid-breaks {
    @media only screen and (min-width: $breakValue) {
      &\@#{$break} {
        display: flex;
        flex-wrap: wrap;
      }

      &--between {
        &\@#{$break} {
          justify-content: space-between;
        }
      }

      &--justify-center {
        &\@#{$break} {
          justify-content: center;
        }
      }

      &--row-reverse {
        &\@#{$break} {
          flex-direction: row-reverse;
        }
      }

      &--center {
        &\@#{$break} {
          align-items: center;
        }
      }

      &--vertical-align {
        &\@#{$break} {
          > [class*="#{$this-short}__col"] {
            margin-block-end: $col-gutter-size;
          }
        }
      }

      &--gutter {
        margin-inline-start: -$col-gutter-size;

        &\@#{$break} {
          > [class*="#{$this-short}__col"] {
            padding-inline-start: $col-gutter-size;
          }
        }
      }

      &__col {
        @each $key, $value in $col-widths {
          &-#{$key} {
            &\@#{$break} {
              @include w-(#{$key}, $col-gutter-size);

              [class*="#{$this-short}--gutter"] &,
              [class*="#{$this-short}--nogutter"] & {
                @include w2-(#{$key});
              }
            }
          }
        }

        &--flexgrow {
          &\@#{$break} {
            flex-grow: 1;
          }
        }
      }
    }
  }
}

@mixin css-grid-scheibo-base($col-gutter-size, $grid-setup, $col-grid-breaks) {
  display: grid;
  grid-gap: $col-gutter-size;

  &--nogutter {
    grid-gap: 0;
  }

  &--gutter {
    grid-gap: $col-gutter-size;
  }

  &--column-gutter {
    column-gap: $col-gutter-size;
  }

  &--row-gutter {
    row-gap: $col-gutter-size;
  }

  @each $key, $value in $grid-setup {
    &-#{$key} {
      grid-template-columns: #{$value};
    }
  }

  @each $break, $breakValue in $col-grid-breaks {
    @media only screen and (min-width: $breakValue) {

      &--nogutter {
        &\@#{$break} {
          grid-gap: 0;
        }
      }

      &--gutter {
        &\@#{$break} {
          grid-gap: $col-gutter-size;
        }
      }

      &--column-gutter {
        &\@#{$break} {
          column-gap: $col-gutter-size;
        }
      }

      &--row-gutter {
        &\@#{$break} {
          row-gap: $col-gutter-size;
        }
      }

      &\@#{$break} {
        display: grid;
        grid-gap: $col-gutter-size;
      }

      @each $key, $value in $grid-setup {
        &-#{$key} {
          &\@#{$break} {
            grid-template-columns: #{$value};
          }
        }
      }
    }
  }
}

@mixin css-grid-scheibo-offsets($col-gutter-size, $grid-setup, $col-grid-breaks) {
  @each $break, $breakValue in $col-grid-breaks {
    @media only screen and (min-width: $breakValue) {
      @for $i from 1 through 12 {
        @for $y from 1 through 12 {
          .o-grid__col-start-#{$y}\@#{$break}.o-grid__col-#{$i}\@#{$break} {
            grid-column: #{$y} / span #{$i};
          }
        }

        // as in bootstrap
        .o-grid__col-#{$i}\@#{$break} {
          grid-column-start: span #{$i};
        }
      }
    }
  }
}

@mixin css-grid-scheibo($col-gutter-size, $grid-setup, $col-grid-breaks) {
  @include css-grid-scheibo-base($col-gutter-size, $grid-setup, $col-grid-breaks);
  @include css-grid-scheibo-offsets($col-gutter-size, $grid-setup, $col-grid-breaks);
}
